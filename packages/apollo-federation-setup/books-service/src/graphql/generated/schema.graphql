directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type Book {
  bookId: ID!
  title: String
  author: Author
}

input CreateBookInput {
  title: String
  authorId: Int
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  books: [Book]
  booksByAuthor(authorId: Int): [Book]
}

union _Entity = Book | Author

scalar _Any

type _Service {
  """
  The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
  """
  sdl: String
}

type Mutation {
  createBook(input: CreateBookInput!): Book!
}

type Author {
  authorId: ID!
  books: [Book]
}
